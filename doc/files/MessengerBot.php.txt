<?php
/**
 * MessengerBotを定義
 *
 * @copyright Genies, Inc. All Rights Reserved
 * @license https://opensource.org/licenses/mit-license.html MIT License
 * @author Rintaro Ishikawa
 */

namespace  MessengerFramework;

require_once realpath(dirname(__FILE__)) . '/FacebookBot.php';
require_once realpath(dirname(__FILE__)) . '/LineBot.php';
require_once realpath(dirname(__FILE__)) . '/Curl.php';
require_once realpath(dirname(__FILE__)) . '/Event.php';
require_once realpath(dirname(__FILE__)) . '/Config.php';

/**
 * [API] 各プラットフォームのMessengerBotのAPIを統一的なインタフェースで扱うラッパー
 *
 * MessengerBotクラスを使う側が何のBotかは最初に指定して使うのでリクエストから判別するような機能はいらない
 *
 * @access public
 * @package MessengerFramework
 */
class MessengerBot {

  /**
   * MessengerBot constructor
   *
   * @param String $botType
   * @package MessengerFramework
   */
  public function __construct($botType) {
    switch (strtolower($botType)) {
      case 'facebook' :
      $this->core = new FacebookBot(new Curl(), new Config());
      break;
      case 'line' :
      $this->core = new LineBot(new Curl(), new Config());
      break;
      default :
      throw new \InvalidArgumentException("指定されたプラットフォームはサポートされていません。", 1);
    }
  }

  // MARK : Public MessengerBotのメソッド

  /**
   * @var FacebookBot|LineBot 各プラットフォームのBotインタフェース
   */
  public $core;

  /**
   * Webhookリクエストをもとにどのプラットフォームの差異を吸収したEventの配列を返す
   *
   * @return Event|null[] プラットフォームの差異を吸収したEventの配列
   */
  public function getEvents() {
    $requestBody = file_get_contents("php://input");
    if (!$this->_validateSignature($requestBody)) {
      throw new \UnexpectedValueException("正しい送信元からのリクエストではありません。");
    }
    return $this->core->parseEvents($requestBody);
  }

  /**
   * replyTokenを使って追加してきたメッセージを返信する
   *
   * @param String $replyToken
   * @return String APIからのレスポンスやCurlのエラーをまとめた配列のJSON
   */
  public function reply(String $replyToken) {
    return $this->core->replyMessage($replyToken);
  }

  /**
   * recipientIdに向けて追加してきたメッセージを送信する
   *
   * @param String $recipientId
   * @return String APIからのレスポンスやCurlのエラーをまとめた配列のJSON
   */
  public function push(String $recipientId) {
    return $this->core->pushMessage($recipientId);
  }

  /**
   * テキストメッセージを送信予定に追加する
   *
   * @param String $message
   */
  public function addText(String $message) {
    switch (true) {
      case $this->core instanceof FacebookBot :
      case $this->core instanceof LineBot :
      $this->core->addText($message);
      break;
      default :
      throw new \LogicException('仕様からここが実行されることはありえません。');
    }
  }

  /**
   * 画像を送信予定に追加する
   *
   * @param String $fileUrl
   * @param String $previewUrl
   */
  public function addImage(String $fileUrl, String $previewUrl) {
    switch (true) {
      case $this->core instanceof FacebookBot :
      case $this->core instanceof LineBot :
      $this->core->addImage($fileUrl, $previewUrl);
      break;
      default :
      throw new \LogicException('仕様からここが実行されることはありえません。');
    }
  }

  /**
   * 動画を送信予定に追加する
   *
   * @param String $fileUrl
   * @param String $previewUrl
   */
  public function addVideo(String $fileUrl, String $previewUrl) {
    switch (true) {
      case $this->core instanceof FacebookBot :
      case $this->core instanceof LineBot :
      $this->core->addVideo($fileUrl, $previewUrl);
      break;
      default :
      throw new \LogicException('仕様からここが実行されることはありえません。');
    }
  }

  /**
   * 音声を送信予定に追加する
   *
   * @param String $fileUrl
   * @param Int $duration
   */
  public function addAudio(String $fileUrl, Int $duration) {
    switch (true) {
      case $this->core instanceof FacebookBot :
      case $this->core instanceof LineBot :
      $this->core->addAudio($fileUrl, $duration);
      break;
      default :
      throw new \LogicException('仕様からここが実行されることはありえません。');
    }
  }

  /**
   * Confirmメッセージを送信予定に追加する
   *
   * buttonsにMessageボタンを含められないので
   * Lineではボタンを押してもユーザーの発言として表示されない
   *
   * @param String $text
   * @param Array $buttons
   */
  public function addConfirm(String $text, Array $buttons) {
    switch (true) {
      case $this->core instanceof FacebookBot :
      return $this->core->addButton($text, $buttons);
      case $this->core instanceof LineBot :
      return $this->core->addConfirm($text, $buttons);
      default :
      throw new \LogicException('仕様からここが実行されることはありえません。');
    }
  }

  /**
   * テンプレートメッセージを送信予定に追加する
   *
   * @param Array $columns
   */
  public function addTemplate(Array $columns) {
    switch (true) {
      case $this->core instanceof FacebookBot :
      $this->core->addGeneric($columns);
      break;
      case $this->core instanceof LineBot :
      $this->core->addCarousel($columns);
      break;
      default :
      throw new \LogicException('仕様からここが実行されることはありえません。');
    }
  }

  /**
   * 発生したEvent(メッセージ)中のファイルを取得する
   *
   * どのプラットフォームのEventとして解釈するかはこのMessengerBotクラスの状態に依存
   *
   * @param Event $message
   * @return Array ファイル名 => バイナリ文字列 な連想配列
   */
  public function getFilesIn(Event $message) {
    return $this->core->getFiles($message);
  }

  /**
   * userIdをもとにプロフィールを取得する
   *
   * userIdをどのプラットフォームのものとして扱うのかはMessengerBotの状態に依存
   *
   * @param String $userId
   * @return Array name => ユーザー名, profilePic => プロフィール画像のURL, rawProfile => 元データ
   */
  public function getProfile($userId) {
    return $this->core->getProfile($userId);
  }

  // MARK : Private

  private function _validateSignature($requestBody) {
    switch (true) {
      case $this->core instanceof FacebookBot :
      $signature = $_SERVER['HTTP_X_HUB_SIGNATURE'] ?? 'invalid';
      break;
      case $this->core instanceof LineBot :
      $signature = $_SERVER['HTTP_X_LINE_SIGNATURE'] ?? 'invalid';
      break;
      default :
      break;
    }

    return $this->core->testSignature($requestBody, $signature);
  }

}

